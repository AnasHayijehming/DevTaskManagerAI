import React, { useState } from 'react';
import ReactMarkdown from 'react-markdown';
import { InformationCircleIcon } from './icons/Icons';
import Tooltip from './Tooltip';
import EditPreviewToggle from './EditPreviewToggle';
import Mermaid from './Mermaid';

interface RequirementSpecTabProps {
  requirement: string;
  referenceLink: string;
  spec: string;
  onRequirementChange: (value: string) => void;
  onReferenceLinkChange: (value: string) => void;
  onSpecChange: (value: string) => void;
}

const inputStyles = "w-full p-3 bg-white text-slate-800 border border-slate-300 rounded-md focus:ring-2 focus:ring-sky-500 focus:border-sky-500 transition-shadow shadow-sm";
const previewStyles = "prose max-w-none p-4 border border-slate-300 rounded-md bg-white min-h-[150px] shadow-sm";

const markdownComponents = {
  code({node, inline, className, children, ...props}: any) {
    const match = /language-(\w+)/.exec(className || '');
    if (!inline && match && match[1] === 'mermaid') {
      return <Mermaid chart={String(children).replace(/\n$/, '')} />;
    }
    return (
      <code className={className} {...props}>
        {children}
      </code>
    );
  }
};

const RequirementSpecTab: React.FC<RequirementSpecTabProps> = ({
  requirement,
  referenceLink,
  spec,
  onRequirementChange,
  onReferenceLinkChange,
  onSpecChange,
}) => {
  const [reqViewMode, setReqViewMode] = useState<'edit' | 'preview'>('edit');
  const [specViewMode, setSpecViewMode] = useState<'edit' | 'preview'>('edit');

  return (
    <div className="flex flex-col gap-6">
      <div>
        <div className="flex items-center justify-between mb-1">
          <label className="text-sm font-semibold text-slate-700 block">Requirement</label>
          <EditPreviewToggle viewMode={reqViewMode} onViewModeChange={setReqViewMode} />
        </div>
        {reqViewMode === 'edit' ? (
            <textarea 
            value={requirement} 
            onChange={e => onRequirementChange(e.target.value)} 
            className={`${inputStyles} min-h-[150px]`} 
            placeholder="State the user need or problem..."
            />
        ) : (
            <div className={previewStyles}>
                {requirement ? <ReactMarkdown components={markdownComponents}>{requirement}</ReactMarkdown> : <p className="text-slate-500 italic">No requirement content to preview.</p>}
            </div>
        )}
      </div>
      <div>
        <label className="text-sm font-semibold text-slate-700 block mb-1">Reference Link (e.g., ClickUp, Jira)</label>
        <input 
          type="url" 
          value={referenceLink} 
          onChange={e => onReferenceLinkChange(e.target.value)} 
          className={inputStyles} 
          placeholder="https://..."
        />
      </div>
      <div>
        <div className="flex items-center justify-between mb-1">
            <div className="flex items-center gap-2">
                <label className="text-sm font-semibold text-slate-700 block">AI-Generated Spec</label>
                <Tooltip text="This specification was generated by the AI based on the requirement. You can edit it directly.">
                    <InformationCircleIcon className="w-4 h-4 text-slate-400 cursor-help" />
                </Tooltip>
            </div>
            <EditPreviewToggle viewMode={specViewMode} onViewModeChange={setSpecViewMode} />
        </div>
        
        {specViewMode === 'edit' ? (
            <textarea 
                value={spec} 
                onChange={e => onSpecChange(e.target.value)} 
                className={`${inputStyles} min-h-[300px]`} 
                placeholder="AI will generate the technical spec here..."
            />
        ) : (
            <div className={`${previewStyles} min-h-[300px]`}>
                {spec ? <ReactMarkdown components={markdownComponents}>{spec}</ReactMarkdown> : <p className="text-slate-500 italic">No spec content to preview.</p>}
            </div>
        )}
      </div>
    </div>
  );
};

export default RequirementSpecTab;
